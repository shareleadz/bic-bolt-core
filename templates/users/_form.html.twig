{% import '@bolt/_macro/_macro.html.twig' as macro %}

{# DONT TOUCH THAT ID! #}
{{ form_start(userForm, {'attr': {'id': 'edituser'}}) }}

    {# ===== USERNAME ===== #}

    {% include '@bolt/_partials/fields/text.html.twig' with {
        'id' : userForm.username.vars.id,
        'label' : 'label.username'|trans,
        'name' : userForm.vars.name ~ '[' ~ userForm.username.vars.name ~ ']',
        'value' : userForm.username.vars.value,
        'required': userForm.username.vars.required,
        'disabled': userForm.username.vars.disabled,
    } %}
    {% if form_errors(userForm.username) is not empty %}
        <div class="field-error">{{ form_errors(userForm.username) }}</div>
    {% endif %}
    {% do userForm.username.setRendered() %}
    {# Mark form field as manually rendered so it's not displayed Twice by the form_rest() Twig helper #}

    {# ===== DISPLAY NAME ===== #}

    {% include '@bolt/_partials/fields/text.html.twig' with {
        'id' : userForm.displayName.vars.id,
        'label' : 'label.display_name'|trans,
        'name' : userForm.vars.name ~ '[' ~ userForm.displayName.vars.name ~ ']',
        'value' : userForm.displayName.vars.value,
        'disabled' : false,
        'required': userForm.displayName.vars.required,
    } %}
    {% if form_errors(userForm.displayName) is not empty %}
        <div class="field-error">{{ form_errors(userForm.displayName) }}</div>
    {% endif %}
    {% do userForm.displayName.setRendered() %}

    {# ===== PASSWORD ===== #}

    {% set use_suggested_pw = userForm.plainPassword.vars.required %}
    {% set suggested_pw = userForm.plainPassword.vars.attr.suggested_password %}

    {% set suggested_pw_postfix %}{% apply spaceless %}
        <div>
            {{ 'password.suggested'|trans({'%password%': suggested_pw|e })|raw }}
            <i style="cursor: pointer;" class="fas fa-clipboard-check ml-2" data-copy-to-clipboard="{{ suggested_pw }}"></i>
        </div>
    {% endapply %}{% endset %}

    {% include '@bolt/_partials/fields/password.html.twig' with {
        'id' : userForm.plainPassword.vars.id,
        'label': 'label.password'|trans,
        'name' : userForm.vars.name ~ '[' ~ userForm.plainPassword.vars.name ~ ']',
        'value': use_suggested_pw ? suggested_pw : '',
        'hidden': 'true',
        'strength': true,
        'postfix': ''~suggested_pw_postfix,
        'required': userForm.plainPassword.vars.required,
    } %}
    {% if form_errors(userForm.plainPassword) is not empty %}
        <div class="field-error">{{ form_errors(userForm.plainPassword) }}</div>
    {% endif %}
    {% do userForm.plainPassword.setRendered() %}

    {# ===== EMAIL ===== #}

    {% include '@bolt/_partials/fields/email.html.twig' with {
        'id' : userForm.email.vars.id,
        'label': 'label.email'|trans,
        'label_class': userForm.email.vars.required ? 'required' : '',
        'value': userForm.email.vars.value,
        'name' : userForm.vars.name ~ '[' ~ userForm.email.vars.name ~ ']',
        'class': 'form-control',
        'required': userForm.email.vars.required,
    } %}
    {% if form_errors(userForm.email) is not empty %}
        <div class="field-error">{{ form_errors(userForm.email) }}</div>
    {% endif %}
    {% do userForm.email.setRendered() %}

    {# ===== LOCALE ===== #}

    {% set localeOptions = [] %}

    {% for locale in userForm.locale.vars.choices %}
        {% set localeOptions = localeOptions|merge([
            {
                'key': locale.value,
                'value': locale.label
            }
        ]) %}
    {% endfor %}

    {% include '@bolt/_partials/fields/select.html.twig' with {
        'id' : userForm.locale.vars.id,
        'label' : 'label.locale'|trans,
        'name' : userForm.vars.name ~ '[' ~ userForm.locale.vars.name ~ ']',
        'value' : userForm.locale.vars.value is empty ? userForm.locale.vars.attr.default_locale : userForm.locale.vars.value,
        'options' : localeOptions,
        'required': userForm.locale.vars.required,
        'multiple': userForm.locale.vars.multiple ? 'true' : 'false',
        'form': 'edituser',
    } %}
    {% if form_errors(userForm.locale) is not empty %}
        <div class="field-error">{{ form_errors(userForm.locale) }}</div>
    {% endif %}
    {% do userForm.locale.setRendered() %}

    {# ===== ROlES ===== #}

    {% if userForm.roles is defined %}
        {% set roleOptions = [] %}

        {% for roleData in userForm.roles.vars.choices ?? [] %}
            {% set roleOptions = roleOptions|merge([
                {
                    'key': roleData.value,
                    'value': roleData.value ~ ' (' ~ roleData.label ~ ')'
                }
            ]) %}
        {% endfor %}

        {% include '@bolt/_partials/fields/select.html.twig' with {
            'id' : userForm.roles.vars.id,
            'label' : 'label.roles'|trans,
            'name' : userForm.vars.name ~ '[' ~ userForm.roles.vars.name ~ ']',
            'value' : userForm.roles.vars.value,
            'options' : roleOptions,
            'required': userForm.roles.vars.required,
            'multiple': userForm.roles.vars.multiple ? 'true' : 'false',
            'form': 'edituser',
        } %}
        {% if form_errors(userForm.roles) is not empty %}
            <div class="field-error">{{ form_errors(userForm.roles) }}</div>
        {% endif %}
        {% do userForm.roles.setRendered() %}
    {% endif %}

    {# ===== REGION ===== #}
    {{ form_row(userForm.region) }}

    {{ form_row(userForm.country) }}



{# ===== STATUS ===== #}

    {% if userForm.status is defined %}
        {% set statusOptions = [] %}
        {% for option in userForm.status.vars.choices ?? [] %}
            {% set statusOptions = statusOptions|merge([
                {
                    'key': option.value,
                    'value': option.value|capitalize
                }
            ]) %}
        {% endfor %}

        {% include '@bolt/_partials/fields/select.html.twig' with {
            'id': userForm.status.vars.id,
            'label': 'field.status'|trans,
            'name' : userForm.vars.name ~ '[' ~ userForm.status.vars.name ~ ']',
            'value': userForm.status.vars.value,
            'options': statusOptions,
            'required': userForm.status.vars.required ? 'true' : 'false',
            'form': 'edituser',
        } %}
        {% if form_errors(userForm.status) is not empty %}
            <div class="field-error">{{ form_errors(userForm.status) }}</div>
        {% endif %}
        {% do userForm.status.setRendered() %}
    {% endif %}

    {# ===== AVATAR ===== #}
    {% include '@bolt/_partials/fields/simple_image.html.twig' with {
        'filepath': userForm.avatar.vars.value,
        'upload_path': userForm.avatar.vars.attr['upload_path'],
        'extensions_allowed': userForm.avatar.vars.attr['extensions_allowed'],
        'id' : userForm.avatar.vars.id,
        'label' : 'label.avatar'|trans,
        'name' : userForm.vars.name ~ '[' ~ userForm.avatar.vars.name ~ ']',
        'value' : userForm.avatar.vars.value,
        'required': userForm.avatar.vars.required,
    } %}
    {% if form_errors(userForm.avatar) is not empty %}
        <div class="field-error">{{ form_errors(userForm.avatar) }}</div>
    {% endif %}
    {% do userForm.avatar.setRendered() %}


{# TODO: include form field with '@bolt/_partials/fields/select.html.twig' #}
    {# Comment out for a while, until we work on this again
        <div class="form-group">
            <label for="backendTheme" class="required">Backend theme</label>
            <select id="backendTheme" name="backendTheme" class="form-control">
                <option value="default" selected="selected">The Default theme</option>
                <option value="dark">The Default Dark theme</option>
                <option value="light">A pretty Light theme</option>
                <option value="woordpers">WoordPers: Kinda looks like that other CMS</option>
            </select>
        </div>
        <theme-select></theme-select>
    #}

    {# DONT TOUCH THAT ID! #}
    {{ macro.button('action.save', 'fa-save', 'primary', {'type': 'submit', 'form': 'edituser', 'name': 'save'}) }}
{{ form_end(userForm) }}

<script>

    const submitFormOnChange = (e) => {
        var formData = new FormData();
        for (let item of document.querySelector('#edituser').elements) {
            formData.append(item.name, item.value);
        }
        formData.append(e.target.name, e.target.value);
        // document.querySelector('.loading').replaceWith('loading')
        var req = new XMLHttpRequest();

        // TODO MAKE URL READ FROM .ENV
        req.open('POST', '/bolt/user-edit/add');

        req.onload = (event) => {

            const newElement = document.createElement('div');
            newElement.innerHTML = event.target.response;
            const newCountry = newElement.querySelector('#user_country')
            document.querySelector('#user_country').replaceWith(newCountry);
        }
        req.send(formData);
    }
    document.querySelector('#user_region').addEventListener("change", submitFormOnChange);

    let loadingState = false
    setTimeout(() => {
        submitFormOnChange()
    }, 500)

</script>
